<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>tmpdbg</Title>
			<Shortcut>tmpdbg</Shortcut>
			<Description>Дэбаг</Description>
			<Author>Microsoft Corporation</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="cpp">
	<![CDATA[#ifdef ONLINE_JUDGE
#define dbg(x) void(0)
#else
template <typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& c) {
	os << c.first << ' ' << c.second << '\n';
	return os;
}
template <typename T1, typename T2>
ostream& operator << (ostream& os, const map<T1, T2>& c) {
	for (auto i : c)
		os << i;
	return os;
}
template <typename T>
ostream& operator << (ostream& os, const vector<vector<T>>& c) {
	for (const auto& i : c)
		os << i << '\n';
	return os;
}
template <typename T>
ostream& operator << (ostream& os, const vector<T>& c) {
	for (const auto& i : c)
		os << i << ' ';
	cout << '\n';
	return os;
}
template <typename T>
ostream& operator << (ostream& os, const list<T>& c) {
	for (const auto& i : c)
		cout << i << ' ';
	cout << '\n';
	return os;
}
template <typename T>
ostream& operator << (ostream& os, const set<T>& c) {
	for (const auto& i : c)
		cout << i << ' ';
	cout << '\n';
	return os;
}
template <typename T>
ostream& operator << (ostream& os, const deque<T>& c) {
	for (const auto& i : c)
		os << i << ' ';
	cout << '\n';
	return os;
}
template <typename T>
ostream& operator << (ostream& os, const queue<T>& c) {
	for (const auto& i : c)
		os << i << " ";
	cout << '\n';
	return os;
}
#define dbg(x) cerr<<endl<<"Line-"<<__LINE__<<" "<<#x<<" = "<<x<<'\n';
#endif]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
